cache:
  paths:
    - /apt-cache
    - /go/src/github.com
    - /go/src/golang.org
    - /go/src/google.golang.org
    - /go/src/gopkg.in

variables:
  CONTAINER_IMAGE: git.abyle.org:5000/$CI_PROJECT_PATH

stages:
  - build
  - test
  - build_static
  - build_image
  - container_scanning
  - release
  - deploy

before_script:
  - mkdir -p /go/src/github.com/torlenor
  - ln -s $CI_PROJECT_DIR /go/src/github.com/torlenor/alolstats
  - cd /go/src/github.com/torlenor/alolstats

build:
  image: golang:1.11
  stage: build
  script:
    - make

unit_tests:
  image: golang:1.11
  stage: test
  services:
    - mongo:latest
  script:
    - make test
    - go tool cover -func coverage.out

build_static:
  image: golang:1.11
  stage: build_static
  artifacts:
    paths:
    - ./bin/
  script:
    - make build-static

create_docker_image:
  stage: build_image
  dependencies: 
    - build_static
  tags:
    - docker-from-docker
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.abyle.org:5000
    - docker pull $CONTAINER_IMAGE:latest || true
    - docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$CI_COMMIT_SHA .
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_SHA

# container_scanning:
#   image: docker:stable
#   stage: container_scanning
#   dependencies:
#     - create_docker_image
#   tags:
#     - docker-in-docker
#   variables:
#     DOCKER_DRIVER: overlay2
#     ## Define two new variables based on GitLab's CI/CD predefined variables
#     ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
#     CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
#     CI_APPLICATION_TAG: $CI_COMMIT_SHA
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - docker run -d --name db arminc/clair-db:latest
#     - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
#     - apk add -U wget ca-certificates
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.abyle.org:5000
#     - docker pull $CONTAINER_IMAGE:$CI_COMMIT_SHA
#     - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
#     - mv clair-scanner_linux_amd64 clair-scanner
#     - chmod +x clair-scanner
#     - touch clair-whitelist.yml
#     - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
#     - retries=0
#     - echo "Waiting for clair daemon to start"
#     - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
#     - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml $CONTAINER_IMAGE:$CI_COMMIT_SHA || true
#     - cat gl-container-scanning-report.json
#   artifacts:
#     reports:
#       container_scanning: gl-container-scanning-report.json

deploy_testing:
  stage: deploy
  dependencies:
    - create_docker_image
  tags:
    - docker-from-docker
  script:
    # We need to login somewhere...
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.abyle.org:5000
    - docker pull $CONTAINER_IMAGE:$CI_COMMIT_SHA
    - echo deploying to test server... $CONTAINER_IMAGE:$CI_COMMIT_SHA
    - echo FAKE FAKE FAKE ... done

release:
  stage: release
  dependencies:
    - create_docker_image
  tags:
    - docker-from-docker
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.abyle.org:5000
    - docker pull $CONTAINER_IMAGE:$CI_COMMIT_SHA
    - docker tag $CONTAINER_IMAGE:$CI_COMMIT_SHA $CONTAINER_IMAGE:$CI_COMMIT_TAG
    - docker tag $CONTAINER_IMAGE:$CI_COMMIT_SHA $CONTAINER_IMAGE:latest
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_TAG
    - docker push $CONTAINER_IMAGE:latest
  only:
    - tags
  except:
    - branches

deploy_production:
  stage: deploy
  dependencies:
    - release
  tags:
    - docker-from-docker
  script:
    # We need to login somewhere...
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.abyle.org:5000
    - docker pull $CONTAINER_IMAGE:$CI_COMMIT_TAG
    - echo deploying to production server... $CONTAINER_IMAGE:$CI_COMMIT_TAG
    - echo FAKE FAKE FAKE ... done
  only:
    - tags
  except:
    - branches
